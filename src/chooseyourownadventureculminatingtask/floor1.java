/*
 * Seth James England
 * sigh
 * 13/06/2018
 */

package chooseyourownadventureculminatingtask;

import java.util.ArrayList;

/**
 * Seth England
 */
public class floor1 extends javax.swing.JFrame {
    // my many global variables
    String answers = "";
    String allowedAnswer = "1";
    String allowedAnswer2 = "2";
    String allowedAnswer3 = "3";
    String allowedAnswer4 = "4";
    int Death = (int)Math.ceil(Math.random()*3);
    int DeathbyChest = (int)Math.ceil(Math.random()*10);
    ArrayList <String> items = new ArrayList();
        // these public static strings are very important, they allow my ariables to be passed through screens
    public static String items1;
    public static String items2;
    /**
     * Creates new form floor1
     */
    public floor1() {
        initComponents();
        initializeButton.setEnabled(false);
        nextFloorButton.setEnabled(false); 
        // the text that first appears on the screen
         mTTa.setText("");
         mTTa.append("You enter the first floor\n");
         mTTa.append("In front of you, a Goblin is rummaging through \na chest, he "
                      + "looks pretty distracted... you can either:\n"
                      + "1. Try to sneak past him \n"
                      + "2. Fight him! ");
          System.out.println(items1);
          System.out.println(items2);
          // giving you back your items from the previous screen
          if (items2.equals("Bone")) { 
          itemsTextArea.append(items1 + "- 1\n");
          itemsTextArea.append(items2 + "- 1");
          items.add("Note");
          items.add("Bone");
          }
          else if (items2.equals("Wand")){
          itemsTextArea.append(items1 + "- 1\n");
          itemsTextArea.append(items2 + "- 1");
          items.add("Note");
          items.add("Wand");
          }
          // a placeholder
          else if (items1.equals("a")) {
              itemsTextArea.setText("");
          }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lootLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mTTa = new javax.swing.JTextArea();
        answerButton = new javax.swing.JButton();
        inputAnswer = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemsTextArea = new javax.swing.JTextArea();
        initializeButton = new javax.swing.JButton();
        nextFloorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lootLabel.setText("Gold: 0");

        mTTa.setEditable(false);
        mTTa.setColumns(20);
        mTTa.setFont(new java.awt.Font("Manga Temple", 0, 10)); // NOI18N
        mTTa.setRows(5);
        jScrollPane1.setViewportView(mTTa);

        answerButton.setText("Answer");
        answerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerButtonActionPerformed(evt);
            }
        });

        inputAnswer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputAnswerKeyTyped(evt);
            }
        });

        itemsTextArea.setEditable(false);
        itemsTextArea.setColumns(20);
        itemsTextArea.setRows(5);
        jScrollPane2.setViewportView(itemsTextArea);

        initializeButton.setText("Initialize");
        initializeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initializeButtonActionPerformed(evt);
            }
        });

        nextFloorButton.setText("Next Floor");
        nextFloorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFloorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lootLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addGap(20, 67, Short.MAX_VALUE)
                        .addComponent(nextFloorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(answerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(initializeButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(answerButton)
                            .addComponent(inputAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lootLabel)
                            .addComponent(nextFloorButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(initializeButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputAnswerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputAnswerKeyTyped

    }//GEN-LAST:event_inputAnswerKeyTyped
/**
 * my answer button, which pulls answers from the text box and checks aswers to what you want to do
 * @param evt 
 */
    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerButtonActionPerformed
        answers = inputAnswer.getText();
        //just absolute instant death if you pick this
        if (answers.equals(allowedAnswer)) {
            mTTa.setText("");
            mTTa.append("The goblin immediately notices you, and slashes your \nthroat, "
                    + "So you have died! \nPlease return to the first screen and "
                    + "start over your adventure");
            itemsTextArea.setText("");
            nextFloorButton.setEnabled(false);
            initializeButton.setEnabled(true);
            answerButton.setEnabled(false);
                   
        }
        // this occurs if you choose this, an will not instantly kill you
        else if (answers.equals(allowedAnswer2)) {
            mTTa.setText("");
            mTTa.append("You decide to fight the goblin! He slices his sword\n"
                    + "through the air at you, but you kick his leg out from\n"
                    + "beneath him and kick him in his warty face! After \n"
                    + "the battle you loot through his pockets and steal\n"
                    + "100 gold from him, you reach to take his sword \n"
                    + "but it disintergrates into ashe\n\n"
                    + "You have 3 options...\n"
                    + "1. Climb out the window (climb)\n"
                    + "2. Simply walk down to the next floor (walk)\n"
                    + "3. Look inside the chest the goblin "
                    + "was rummaging \n around in! (chest)");
            lootLabel.setText("Gold: 100");
        }
        //go outthe window
        else if (answers.equals("climb")) {
             mTTa.setText("");
             //method check
           if (itsYaBoyDeath(0) == 0) {
               mTTa.setText("You have died! Please Re-Initialize ");
               answerButton.setEnabled(false);
               initializeButton.setEnabled(true);
               itemsTextArea.setText("");
         }
           else {
               mTTa.setText("You Look out the window, your feet dangling \nprecariously..."
                       + "Please continue to the next floor");
              nextFloorButton.setEnabled(true);
              answerButton.setEnabled(false);
           }
        }
        //go down to the next floor
        else if (answers.equals("walk")) {
                mTTa.setText("");
                mTTa.append("Please continue to the next floor");
                nextFloorButton.setEnabled(true);
                answerButton.setEnabled(false);
           }
        // a good chance of death if you choose this
        else if (answers.equals("chest")) {
            if (helloDeath(0) == 0) {
                mTTa.setText("");
            mTTa.append("The chest is sitting quietly, yet you still\n"
                    + "decide to open it. It explodes in your face, you are \n"
                    + "dead, please re-initialize...");
            answerButton.setEnabled(false);
            initializeButton.setEnabled(true);
               itemsTextArea.setText("");
         }
            // just a little secret, 1/10 chance of survival so tred carefully
           else {
                mTTa.setText("You open the chest... inside is... \n"
                        + "Angus, Angus is inside the chest...\n\n"
                        + "You now have 2 options...\n"
                + "1. Climb out the window (climb)\n"
                + "2. Simply walk down to the next floor (walk)\n");
            }
        }
        
    }//GEN-LAST:event_answerButtonActionPerformed
/**
 * This is an extremely important part of my code, it determines what item variables to pass onto the next fame, which also determines how your adventure plays out! I explained the foreign
 * code within the statement, but basically is takes a variable from a array, and turns it into a string, it then opens the next frame (which has code within its run component that opens two voided spots) and declares those two spots as variables, which also has a statement that allows this in the initcomponents section.
 * @param evt 
 */
    private void nextFloorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFloorButtonActionPerformed
             if (items.isEmpty()) {
             String info[]=new String[2];  //creates an array to store variable values. You can increase the size when needed
             info[0]="a"; //put jTextField1's value in the array.
             info[1]="a";
             floor2.main(info); // call floor1. Here we create an object of a floor1. We are passing info as arguments to main function.
             this.setVisible(false);
          }
        else if (items.get(1).equals("Wand")) {
             String info[]=new String[2];  //creates an array to store variable values. You can increase the size when needed
             info[0]=items.get(0); //put jTextField1's value in the array.
             info[1]=items.get(1);
             floor2.main(info); // call floor1. Here we create an object of a floor1. We are passing info as arguments to main function.
             this.setVisible(false);
         }
         else if (items.get(1).equals("Bone")) {
             String info[]=new String[2];  //creates an array to store variable values. You can increase the size when needed
             info[0]=items.get(0); //put jTextField1's value in the array.
             info[1]=items.get(1);
             floor2.main(info); // call floor1. Here we create an object of a floor1. We are passing info as arguments to main function.
             this.setVisible(false);
         }
    }//GEN-LAST:event_nextFloorButtonActionPerformed
/**
 * just if you die, return to the main screen
 * @param evt 
 */
    private void initializeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initializeButtonActionPerformed
        this.setVisible(false);
        new chooseYourOwnAdventureCulminatingTaskFrame().setVisible(true);
    }//GEN-LAST:event_initializeButtonActionPerformed
    /**
     * My method to determine if you die
     * @param chanceOfDeath
     * @return 
     */
    public int itsYaBoyDeath (int chanceOfDeath) {
        // the declaration of a new random number
        int value = (int)Math.ceil(Math.random()*3);
        //System.out.println(value);
        //the check of the death
        if (value == Death) {
        chanceOfDeath = 0;
      }
        else if(value != Death){
        chanceOfDeath = 1;
    }
        // returning whatever it gives you
        return chanceOfDeath;
    }
    /**
     * the method that checks for death if you open the Angus chest
     * @param chanceOfDeath
     * @return 
     */
    public int helloDeath (int chanceOfDeath) {
        int value = (int)Math.ceil(Math.random()*10);
        //System.out.println(value);
        if (value != Death) {
        chanceOfDeath = 0;
      }
        else if(value == Death){
        chanceOfDeath = 1;
    }
        return chanceOfDeath;
     }    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // VERY IMPORTANT, THIS IS VARIABLE PASS CODE WHICH OPEN TWO VOID SPOTS FOR A CARIABLE TO COME THROUGH
        items1 = args[0];
        items2 = args[1];
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new floor1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answerButton;
    private javax.swing.JButton initializeButton;
    private javax.swing.JTextField inputAnswer;
    private javax.swing.JTextArea itemsTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lootLabel;
    private javax.swing.JTextArea mTTa;
    private javax.swing.JButton nextFloorButton;
    // End of variables declaration//GEN-END:variables
}
